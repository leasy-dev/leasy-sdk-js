fragment Resource on Resource {
  __typename
  id
  denomination
  calendar {
    __typename
    id
    denomination
  }
}

fragment Calendar on Calendar {
  __typename
  id
  denomination
}

fragment Booking on Booking {
  __typename
  id
  resource {
    __typename
    id
    denomination
  }
  startTime
  endTime
}

fragment TimeSlot on TimeSlot {
  __typename
  startTime
  endTime
  available
}

fragment Reservation on Reservation {
  __typename
  id
  expiresAt
  completedAt
  bookings(first: 100) {
    edges {
      node {
        ...Booking
      }
    }
  }
}

fragment PageInfoFields on PageInfo {
  __typename
  hasNextPage
  endCursor
}

fragment UserError on UserError {
  __typename
  message
  ... on ValidationError {
    field
    hint
  }
}

query AllResources($first: Int, $after: String) {
  organisation {
    resources(first: $first, after: $after) {
      pageInfo {
        ...PageInfoFields
      }
      edges {
        node {
          ...Resource
        }
      }
    }
  }
}

query SingleResource($id: ID!) {
  resource(id: $id) {
    ...Resource
  }
}

query AllCalendars($first: Int, $after: String) {
  organisation {
    calendars(first: $first, after: $after) {
      pageInfo {
        ...PageInfoFields
      }
      edges {
        node {
          ...Calendar
        }
      }
    }
  }
}

query SingleCalendar($id: ID!) {
  calendar(id: $id) {
    ...Calendar
  }
}

query TimeSlotsByResource($resourceId: ID!, $filter: TimeSlotFilter, $first: Int, $after: String) {
  resource(id: $resourceId) {
    slots(filter: $filter, first: $first, after: $after) {
      pageInfo {
        ...PageInfoFields
      }
      edges {
        node {
          ...TimeSlot
        }
      }
    }
  }
}

query SingleReservation($id: ID!) {
  reservation(id: $id) {
    ...Reservation
  }
}

mutation CreateReservation($draft: ReservationDraft!) {
  createReservation(draft: $draft) {
    success
    errors {
      ...UserError
    }
    reservation {
      ...Reservation
    }
  }
}

mutation UpdateReservation($id: ID!, $actions: [ReservationAction!]!) {
  updateReservation(id: $id, actions: $actions) {
    success
    errors {
      ...UserError
    }
    reservation {
      ...Reservation
    }
  }
}

mutation DeleteReservation($id: ID!) {
  deleteReservation(id: $id) {
    success
    errors {
      ...UserError
    }
  }
}
